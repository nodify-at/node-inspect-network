"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const socket_1 = require("./socket");
class InspectNetworkRequest {
    init(request) {
        const client = socket_1.socket;
        const proto = InspectNetworkRequest.requestPrototype(request);
        if (!proto._initBeforeDebug) {
            proto._initBeforeDebug = proto.init;
            proto.init = function () {
                if (!this.initialized) {
                    this.initialized = true;
                    const _debugId = Math.random().toString(36).substr(2, 20);
                    this.on('request', () => {
                        const data = {
                            start: true,
                            debugId: _debugId,
                            uri: this.uri.href,
                            method: this.method,
                            headers: this.headers,
                            body: undefined
                        };
                        client.send(data);
                    });
                    this.on('data', (chunk) => {
                        const data = {
                            receiving: true,
                            debugId: _debugId,
                            length: chunk.length
                        };
                        client.send(data);
                    });
                    this.on('response', (res) => {
                        if (this.callback) {
                        }
                        else {
                            const data = {
                                finished: true,
                                debugId: _debugId,
                                headers: res.headers,
                                statusCode: res.statusCode,
                                body: res.body
                            };
                            client.send(data);
                        }
                    });
                    this.on('complete', (res) => {
                        if (this.callback) {
                            const data = {
                                finished: true,
                                debugId: _debugId,
                                headers: res.headers,
                                statusCode: res.statusCode,
                                body: res.body
                            };
                            client.send(data);
                        }
                    });
                    this.on('redirect', () => {
                        const type = (this.response.statusCode == 401 ? 'auth' : 'redirect');
                        const data = {
                            type,
                            debugId: _debugId,
                            statusCode: this.response.statusCode,
                            headers: this.response.headers,
                            uri: this.uri.href
                        };
                        client.send(data);
                    });
                }
                return proto._initBeforeDebug.apply(this, arguments);
            };
        }
        this.stopDebugging(request, proto);
    }
    static requestPrototype(request) {
        let proto;
        if (request.Request) {
            proto = request.Request.prototype;
        }
        else if (request.get && request.post) {
            const req = request('http://localhost:4').on('error', function () {
            });
            proto = req.constructor.prototype;
        }
        else {
            throw new Error('Pass the object returned by require(\'request\') to this function.');
        }
        return proto;
    }
    stopDebugging(request, proto) {
        if (!request.stopDebugging) {
            request.stopDebugging = function () {
                proto.init = proto._initBeforeDebug;
                delete proto._initBeforeDebug;
            };
        }
    }
}
exports.InspectNetworkRequest = InspectNetworkRequest;
exports.inspectNetworkRequest = (request) => new InspectNetworkRequest().init(request);
//# sourceMappingURL=data:application/json;base64,